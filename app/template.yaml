AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Publishing artifacts using S3 signed Url

Parameters:
  AuthorizerAPIKey:
    Description: Api Key for authorizer
    Type: String
    Default: "1230456789"

Resources:
  # HTTP API
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # CORS configuration - this is open for development only and should be restricted in prod.
      # See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"

  ApiKeyIamPolicyAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: ApiKeyIamPolicyAuthorizer
      AuthorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiKeyAuthorizer.Arn}/invocations
      ApiId:
        Ref: MyApi
      AuthorizerType: "REQUEST"
      AuthorizerPayloadFormatVersion: 2.0
      IdentitySource:
        - $request.header.Authorization
        - $request.querystring.target

  AuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt: ApiKeyAuthorizer.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/authorizers/${ApiKeyIamPolicyAuthorizer}

  ## Lambda functions
  UploadRequest:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getSignedURL/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          UploadBucket:
            Ref: Incoming
      Policies:
        - S3WritePolicy:
            BucketName:
              Ref: Incoming
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /uploads
            Method: get
            ApiId:
              Ref: MyApi

  PublishArtifacts:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publishArtifacts/
      Handler: app.s3_publish_handler
      Runtime: python3.9
      Timeout: 3
      MemorySize: 128
      Role:
        Fn::GetAtt: PublishArtifactsExecutionRole.Arn
      Environment:
        Variables:
          ResultsBucket:
            Ref: Outgoing

  IncomingInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt: PublishArtifacts.Arn
      Principal: "s3.amazonaws.com"
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn:
        Fn::GetAtt: Incoming.Arn

  ApiKeyAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: keyAuthorizer/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Role:
        Fn::GetAtt: PublishArtifactsExecutionRole.Arn
      Environment:
        Variables:
          Authorizer_API_KEY:
            Ref: AuthorizerAPIKey

  ## S3 bucket
  Incoming:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - HEAD
            AllowedOrigins:
              - "*"

  Outgoing:
    Type: AWS::S3::Bucket

  ## Roles
  PublishArtifactsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3ReadWriteLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - Incoming
                          - Arn
                      - /*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - Outgoing
                          - Arn
                      - /*
        - PolicyName: LambdaAttachToVpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"

Outputs:
  APIendpoint:
    Description: "HTTP API endpoint URL"
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com
  IncomingBucket:
    Description: "S3 bucket for application uploads"
    Value:
      Ref: Incoming
